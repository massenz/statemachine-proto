// Copyright (c) 2022 AlertAvert.com.  All rights reserved.
// Licensed under the Apache License, Version 2.0
//
// Author: Marco Massenzio (marco@alertavert.com)

syntax = "proto3";
package statemachine.v1beta;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// This is the Go import package; there is no correlation with the proto `package` above.
//
// Note that when generating the Go code, only the last part of the `go_package` is used; the
// full import is only relevant if this proto is imported by another proto, and the full
// `go_package` is used to generate the Go import path.
//
//  In the project's go.mod use:
//    require (
//    	github.com/massenz/statemachine-proto/golang v1beta
//    )
//
// and in the go source:
//    import (
//      	protos "github.com/massenz/statemachine-proto/golang/api"
//    )
//
// See: https://developers.google.com/protocol-buffers/docs/reference/go-generated#package
//   and https://stackoverflow.com/questions/66321215/what-is-the-go-package-option-used-for-in-a-protocol-buffer-file
option go_package = "github.com/massenz/statemachine-proto/golang/api";

// A state-machine Transition models the successful processing of an Event, and the
// FSM transitioning from the `from` state to the `to` state.
message Transition {
  string from = 1;
  string to = 2;
  string event = 3;
}

message Event {
  // A unique event ID, either user- or system-assigned; typically a UUID.
  string event_id = 1;

  // The time the event was received by the system; if not already set, it
  // will be system-assigned as the current time.
  google.protobuf.Timestamp timestamp = 2;

  // The FSM transition that this event refers to (when stored as a "historical" event);
  // when received by the system, it may simply represent the `event` that triggered the
  // Transition.
  Transition transition = 3;

  // The Sender of this event, if known; it can be a URI or just an ID, the semantics of
  // this field are left vague by design, the meaning of the `sender` string will be
  // dependant on the type of Event sent, and the target StateMachine.
  string originator = 4;

  // An optional payload, which can be any arbitrary data, and is left to the user to
  // define the semantics of the payload.
  string details = 5;
}

message Configuration {
  // A Configuration is uniquely identified by its `Name` and `Version`
  // Configurations are immutable and should never be modified without
  // also changing the version.
  string name = 4;

  // A version must be unique for a `Configuration`; if missing, a default `v1` is assigned
  string version = 5;

  // A list of all the state the FSM may transition through.
  // A 'final' state is identified by the one state (if any) that
  // does not have any transition with the state as the `from`.
  repeated string states = 1;

  repeated Transition transitions = 2;

  // The initial `state` for the FSM, and the one it returns to if
  // it is `restart()`ed.
  string starting_state = 3;
}

// a FiniteStateMachine tracks progress across States, driven by Events, according
// to a Configuration; each FSM can track, for example, an order being processed and shipped,
// a build pipeline, or a more complex multi-step process, possibly with cycles, and several
// terminal states.
//
// Each FSM is uniquely defined by its associated Configuration (identified by `config_id`) which
// *should* be immutable: changing an FSM's Configuration post-creation can cause undefined results,
// but, equally, modifying a Configuration which is being used by FSMs, will cause unpredictable
// results.
//
// The FSM carries a `history` of all past Events which have led the FSM to its current `state`, so
// that it can be replicated (and queries about it can be satisfied).
message FiniteStateMachine {

  // A config_id is the unique identifier for the `Configuration` which defines the possible `states`
  // for an FSM, as well as the allowed `Transitions`; this *may* be composed by a combination of the
  // name and version, but this is not required.
  //
  // So long as `config_id` uniquely identifies a valid (immutable) Configuration, this is sufficient.
  string config_id = 1;

  // The current state for this FSM, *should* be set as the `starting_state` of the Configuration at creation.
  string state = 2;

  // An ordered sequence of Events, recording all FSM transitions.
  repeated Event history = 3;
}

// --------------- Service API ---------------

// An `Event` for an FSM.
//
// The target statemachine is uniquely identified by the `id` and namespaced by the `config`.
//
// This can be also used to request the outcome of the Event,
// (an `EventOutcome`) by leaving `event` empty and using the `id` as the `event_id`
// returned in the `EventResponse`.
message EventRequest {
  Event event = 1;
  string config = 2;
  string id = 3;
}

// Used to communicate back the `event_id` for the processed Event; it will be the
// Event's `event_id` passed in the `EventRequest` (if one was provided) or a newly
// generated one (typically, a UUID) if none was provided.
//
// The `event_id` can be used to correlate the outcome of the event processing (which
// is asynchronous).
message EventResponse {
  string event_id = 1;
  EventOutcome outcome = 2;
}

// An `EventOutcome` describes what happened when the Event was processed by the
// FSM and will be returned by the server (and also posted to the notifications queue,
// if configured).
message EventOutcome {
  enum StatusCode {
    Ok = 0;
    GenericError = 1;
    EventNotAllowed = 2;
    FsmNotFound = 3;
    TransitionNotAllowed = 4;
    InternalError = 5;
    MissingDestination = 6;
    ConfigurationNotFound = 7;
  }

  // The status code for the outcome of the Event processing; it will be `Ok` if the Event
  // has been successfully processed (in which case the `details` field will be empty).
  StatusCode code = 1;

  // The ID of the FSM for which the event was processed, namespaced by its configuration.
  string id = 3;
  string config = 4;

  // If anything other than `Ok` is returned, this field will contain a human-readable description
  // of the error, if available.
  string details = 2;
}

// Used to retrieve either an individual FSM (by its `id`) or
// the set of FSMs, in a given `state`.
//
// Either way, FSMs are namespaced by their Configuration `name`,
// but without specifying the `version`.
message GetFsmRequest {
  // The "type" of FSM, identified by the configuration name
  string config = 1;

  // One or the other MUST be specified when looking up FSMs,
  // but both cannot be specified at the same time.
  oneof query {
    // Used if retrieving a single statemachine: the `id` to lookup
    string id = 2;
    // If retrieving a number of statemachines: their collective state
    string state = 3;
  }
}

// Request to create (or update) a `Statemachine`.
message PutFsmRequest {
  // The ID for the FSM if specified by the client: leave blank to let the server generate random UUID.
  // Either way, if successful, the `id` will be returned in the `PutResponse`
  string id = 1;

  // The new FSM, usually only the `config_id` is required, the rest is derived from
  // the Configuration.
  FiniteStateMachine fsm = 2;
}

// Response from the server to confirm creation was successful, returning the ID (possibly,
// a newly generated random UUID) and the entity being stored.
message PutResponse {
  // The ID of the newly created entity.
  string id = 1;

  // The full contents of the newly created entity, can only be on of either an FSM or
  // a Configuration, make sure to check if unsure.
  oneof entity_response {
    Configuration config = 2;
    FiniteStateMachine fsm = 3;
  }
}

// Convenience response type, to return a list of IDs
message ListResponse {
  repeated string ids = 1;
}

service StatemachineService {
  // Creates an immutable Configuration, which can then be used to create FSMs whose
  // state transitions are defined in the configuration.
  // `Configuration`s are immutable and cannot be modified once created: attempting
  // to `PUT` a `Configuration` with the same `name` and `version` will cause an `AlreadyExists` error.
  rpc PutConfiguration(Configuration) returns (PutResponse);

  // Retrieves all Configuration names, or versions.
  //
  // If the `StringValue` passed in is non-empty, the returned list will be of all
  // the fully qualified (`name:version`) configurations available on this server, where
  // the `Configuration.name` matches the value.
  //
  // If the value is empty, all the `Configuration` names (without the `version`) will be
  // returned.
  rpc GetAllConfigurations(google.protobuf.StringValue) returns (ListResponse);

  // Streams all the `Configuration` whose name matches the passed in StringValue.
  // Use this (instead of the `GetAllConfigurations()) if you want the full contents
  // of the configurations.
  rpc StreamAllConfigurations(google.protobuf.StringValue) returns (stream Configuration);

  // Retrieves a Configuration by its ID.
  rpc GetConfiguration(google.protobuf.StringValue) returns (Configuration);

  // Creates a new FSM, using the Configuration identified by `config_id`.
  // The FSM itself is immutable, only its `state` can be mutated by processing Events.
  rpc PutFiniteStateMachine(PutFsmRequest) returns (PutResponse);

  // Retrieves an FSM by its Configuration `name` and Statemachine `ID`.
  rpc GetFiniteStateMachine(GetFsmRequest) returns (FiniteStateMachine);

  // Looks up all the FSMs, with the given `config_name` that are in the given `state`
  // and returns their IDs.
  rpc GetAllInState(GetFsmRequest) returns (ListResponse);

  // Streams the full contents of the `FiniteStateMachine` that match the request,
  // including their `id`.
  //
  // For this method call, the `state` may optionally be empty, all the FSMs that match
  // the configuration name will be returned.
  //
  // The server may optionally choose not to implement this feature, and return an
  // `InvalidRequest` if `state` is empty.
  rpc StreamAllInstate(GetFsmRequest) returns (stream PutResponse);

  // Process an Event for an FSM, identified by `id`.
  //
  // Events are processed asynchronously; the `outcome` will be empty, but
  // the returned `event_id` can be used later on to query the outcome of the
  // event processing (see `GetEventOutcome`).
  rpc SendEvent(EventRequest) returns (EventResponse);

  // Get the outcome of an event processing, identified by the `event_id` returned by `ProcessEvent`.
  rpc GetEventOutcome(EventRequest) returns (EventResponse);
}
