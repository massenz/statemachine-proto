// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/statemachine.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatemachineServiceClient is the client API for StatemachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatemachineServiceClient interface {
	// Creates an immutable Configuration, which can then be used to create an FSM.
	PutConfiguration(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*PutResponse, error)
	// Retrieves a Configuration by its ID.
	GetConfiguration(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Configuration, error)
	// Creates a new FSM, using the Configuration identified by `config_id`.
	// The FSM itself is immutable, only its `state` can be mutated by processing Events.
	PutFiniteStateMachine(ctx context.Context, in *FiniteStateMachine, opts ...grpc.CallOption) (*PutResponse, error)
	// Retrieves an FSM by its ID.
	GetFiniteStateMachine(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*FiniteStateMachine, error)
	// Process an Event for an FSM, identified by `dest`.
	// As events are processed asynchronously, the `event_id` is returned, which can be used
	// to correlate the outcome of the event processing.
	// In the EventResponse, the `outcome` is unlikely to have been filled in; use the `event_id`
	// to query the outcome of the event processing by using `GetEventOutcome`.
	ProcessEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	// Get the outcome of an event processing, identified by the `event_id` returned by `ProcessEvent`.
	GetEventOutcome(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type statemachineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatemachineServiceClient(cc grpc.ClientConnInterface) StatemachineServiceClient {
	return &statemachineServiceClient{cc}
}

func (c *statemachineServiceClient) PutConfiguration(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/statemachine.v2.StatemachineService/PutConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statemachineServiceClient) GetConfiguration(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/statemachine.v2.StatemachineService/GetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statemachineServiceClient) PutFiniteStateMachine(ctx context.Context, in *FiniteStateMachine, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/statemachine.v2.StatemachineService/PutFiniteStateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statemachineServiceClient) GetFiniteStateMachine(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*FiniteStateMachine, error) {
	out := new(FiniteStateMachine)
	err := c.cc.Invoke(ctx, "/statemachine.v2.StatemachineService/GetFiniteStateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statemachineServiceClient) ProcessEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/statemachine.v2.StatemachineService/ProcessEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statemachineServiceClient) GetEventOutcome(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/statemachine.v2.StatemachineService/GetEventOutcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatemachineServiceServer is the server API for StatemachineService service.
// All implementations must embed UnimplementedStatemachineServiceServer
// for forward compatibility
type StatemachineServiceServer interface {
	// Creates an immutable Configuration, which can then be used to create an FSM.
	PutConfiguration(context.Context, *Configuration) (*PutResponse, error)
	// Retrieves a Configuration by its ID.
	GetConfiguration(context.Context, *GetRequest) (*Configuration, error)
	// Creates a new FSM, using the Configuration identified by `config_id`.
	// The FSM itself is immutable, only its `state` can be mutated by processing Events.
	PutFiniteStateMachine(context.Context, *FiniteStateMachine) (*PutResponse, error)
	// Retrieves an FSM by its ID.
	GetFiniteStateMachine(context.Context, *GetRequest) (*FiniteStateMachine, error)
	// Process an Event for an FSM, identified by `dest`.
	// As events are processed asynchronously, the `event_id` is returned, which can be used
	// to correlate the outcome of the event processing.
	// In the EventResponse, the `outcome` is unlikely to have been filled in; use the `event_id`
	// to query the outcome of the event processing by using `GetEventOutcome`.
	ProcessEvent(context.Context, *EventRequest) (*EventResponse, error)
	// Get the outcome of an event processing, identified by the `event_id` returned by `ProcessEvent`.
	GetEventOutcome(context.Context, *GetRequest) (*EventResponse, error)
	mustEmbedUnimplementedStatemachineServiceServer()
}

// UnimplementedStatemachineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatemachineServiceServer struct {
}

func (UnimplementedStatemachineServiceServer) PutConfiguration(context.Context, *Configuration) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutConfiguration not implemented")
}
func (UnimplementedStatemachineServiceServer) GetConfiguration(context.Context, *GetRequest) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedStatemachineServiceServer) PutFiniteStateMachine(context.Context, *FiniteStateMachine) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFiniteStateMachine not implemented")
}
func (UnimplementedStatemachineServiceServer) GetFiniteStateMachine(context.Context, *GetRequest) (*FiniteStateMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiniteStateMachine not implemented")
}
func (UnimplementedStatemachineServiceServer) ProcessEvent(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}
func (UnimplementedStatemachineServiceServer) GetEventOutcome(context.Context, *GetRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventOutcome not implemented")
}
func (UnimplementedStatemachineServiceServer) mustEmbedUnimplementedStatemachineServiceServer() {}

// UnsafeStatemachineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatemachineServiceServer will
// result in compilation errors.
type UnsafeStatemachineServiceServer interface {
	mustEmbedUnimplementedStatemachineServiceServer()
}

func RegisterStatemachineServiceServer(s grpc.ServiceRegistrar, srv StatemachineServiceServer) {
	s.RegisterService(&StatemachineService_ServiceDesc, srv)
}

func _StatemachineService_PutConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatemachineServiceServer).PutConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statemachine.v2.StatemachineService/PutConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatemachineServiceServer).PutConfiguration(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatemachineService_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatemachineServiceServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statemachine.v2.StatemachineService/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatemachineServiceServer).GetConfiguration(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatemachineService_PutFiniteStateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiniteStateMachine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatemachineServiceServer).PutFiniteStateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statemachine.v2.StatemachineService/PutFiniteStateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatemachineServiceServer).PutFiniteStateMachine(ctx, req.(*FiniteStateMachine))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatemachineService_GetFiniteStateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatemachineServiceServer).GetFiniteStateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statemachine.v2.StatemachineService/GetFiniteStateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatemachineServiceServer).GetFiniteStateMachine(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatemachineService_ProcessEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatemachineServiceServer).ProcessEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statemachine.v2.StatemachineService/ProcessEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatemachineServiceServer).ProcessEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatemachineService_GetEventOutcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatemachineServiceServer).GetEventOutcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statemachine.v2.StatemachineService/GetEventOutcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatemachineServiceServer).GetEventOutcome(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatemachineService_ServiceDesc is the grpc.ServiceDesc for StatemachineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatemachineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statemachine.v2.StatemachineService",
	HandlerType: (*StatemachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutConfiguration",
			Handler:    _StatemachineService_PutConfiguration_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _StatemachineService_GetConfiguration_Handler,
		},
		{
			MethodName: "PutFiniteStateMachine",
			Handler:    _StatemachineService_PutFiniteStateMachine_Handler,
		},
		{
			MethodName: "GetFiniteStateMachine",
			Handler:    _StatemachineService_GetFiniteStateMachine_Handler,
		},
		{
			MethodName: "ProcessEvent",
			Handler:    _StatemachineService_ProcessEvent_Handler,
		},
		{
			MethodName: "GetEventOutcome",
			Handler:    _StatemachineService_GetEventOutcome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/statemachine.proto",
}
