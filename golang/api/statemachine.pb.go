// Copyright (c) 2022 AlertAvert.com.  All rights reserved.
// Licensed under the Apache License, Version 2.0
//
// Author: Marco Massenzio (marco@alertavert.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: api/statemachine.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventOutcome_StatusCode int32

const (
	EventOutcome_Ok                    EventOutcome_StatusCode = 0
	EventOutcome_GenericError          EventOutcome_StatusCode = 1
	EventOutcome_EventNotAllowed       EventOutcome_StatusCode = 2
	EventOutcome_FsmNotFound           EventOutcome_StatusCode = 3
	EventOutcome_TransitionNotAllowed  EventOutcome_StatusCode = 4
	EventOutcome_InternalError         EventOutcome_StatusCode = 5
	EventOutcome_MissingDestination    EventOutcome_StatusCode = 6
	EventOutcome_ConfigurationNotFound EventOutcome_StatusCode = 7
)

// Enum value maps for EventOutcome_StatusCode.
var (
	EventOutcome_StatusCode_name = map[int32]string{
		0: "Ok",
		1: "GenericError",
		2: "EventNotAllowed",
		3: "FsmNotFound",
		4: "TransitionNotAllowed",
		5: "InternalError",
		6: "MissingDestination",
		7: "ConfigurationNotFound",
	}
	EventOutcome_StatusCode_value = map[string]int32{
		"Ok":                    0,
		"GenericError":          1,
		"EventNotAllowed":       2,
		"FsmNotFound":           3,
		"TransitionNotAllowed":  4,
		"InternalError":         5,
		"MissingDestination":    6,
		"ConfigurationNotFound": 7,
	}
)

func (x EventOutcome_StatusCode) Enum() *EventOutcome_StatusCode {
	p := new(EventOutcome_StatusCode)
	*p = x
	return p
}

func (x EventOutcome_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventOutcome_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_statemachine_proto_enumTypes[0].Descriptor()
}

func (EventOutcome_StatusCode) Type() protoreflect.EnumType {
	return &file_api_statemachine_proto_enumTypes[0]
}

func (x EventOutcome_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventOutcome_StatusCode.Descriptor instead.
func (EventOutcome_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{6, 0}
}

type HealthResponse_ReadyState int32

const (
	HealthResponse_READY     HealthResponse_ReadyState = 0
	HealthResponse_NOT_READY HealthResponse_ReadyState = 1
)

// Enum value maps for HealthResponse_ReadyState.
var (
	HealthResponse_ReadyState_name = map[int32]string{
		0: "READY",
		1: "NOT_READY",
	}
	HealthResponse_ReadyState_value = map[string]int32{
		"READY":     0,
		"NOT_READY": 1,
	}
)

func (x HealthResponse_ReadyState) Enum() *HealthResponse_ReadyState {
	p := new(HealthResponse_ReadyState)
	*p = x
	return p
}

func (x HealthResponse_ReadyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthResponse_ReadyState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_statemachine_proto_enumTypes[1].Descriptor()
}

func (HealthResponse_ReadyState) Type() protoreflect.EnumType {
	return &file_api_statemachine_proto_enumTypes[1]
}

func (x HealthResponse_ReadyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthResponse_ReadyState.Descriptor instead.
func (HealthResponse_ReadyState) EnumDescriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{11, 0}
}

// A state-machine Transition models the successful processing of an Event, and the
// FSM transitioning from the `from` state to the `to` state.
type Transition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To    string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Event string `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *Transition) Reset() {
	*x = Transition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transition) ProtoMessage() {}

func (x *Transition) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transition.ProtoReflect.Descriptor instead.
func (*Transition) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{0}
}

func (x *Transition) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transition) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transition) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique event ID, either user- or system-assigned; typically a UUID.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The time the event was received by the system; if not already set, it
	// will be system-assigned as the current time.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The FSM transition that this event refers to (when stored as a "historical" event);
	// when received by the system, it may simply represent the `event` that triggered the
	// Transition.
	Transition *Transition `protobuf:"bytes,3,opt,name=transition,proto3" json:"transition,omitempty"`
	// The Sender of this event, if known; it can be a URI or just an ID, the semantics of
	// this field are left vague by design, the meaning of the `sender` string will be
	// dependant on the type of Event sent, and the target StateMachine.
	Originator string `protobuf:"bytes,4,opt,name=originator,proto3" json:"originator,omitempty"`
	// An optional payload, which can be any arbitrary data, and is left to the user to
	// define the semantics of the payload.
	Details string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Event) GetTransition() *Transition {
	if x != nil {
		return x.Transition
	}
	return nil
}

func (x *Event) GetOriginator() string {
	if x != nil {
		return x.Originator
	}
	return ""
}

func (x *Event) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Configuration is uniquely identified by its `Name` and `Version`
	// Configurations are immutable and should never be modified without
	// also changing the version.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// A version must be unique for a `Configuration`; if missing, a default `v1` is assigned
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// A list of all the state the FSM may transition through.
	// A 'final' state is identified by the one state (if any) that
	// does not have any transition with the state as the `from`.
	States      []string      `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	Transitions []*Transition `protobuf:"bytes,2,rep,name=transitions,proto3" json:"transitions,omitempty"`
	// The initial `state` for the FSM, and the one it returns to if
	// it is `restart()`ed.
	StartingState string `protobuf:"bytes,3,opt,name=starting_state,json=startingState,proto3" json:"starting_state,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{2}
}

func (x *Configuration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Configuration) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Configuration) GetStates() []string {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *Configuration) GetTransitions() []*Transition {
	if x != nil {
		return x.Transitions
	}
	return nil
}

func (x *Configuration) GetStartingState() string {
	if x != nil {
		return x.StartingState
	}
	return ""
}

// a FiniteStateMachine tracks progress across States, driven by Events, according
// to a Configuration; each FSM can track, for example, an order being processed and shipped,
// a build pipeline, or a more complex multi-step process, possibly with cycles, and several
// terminal states.
//
// Each FSM is uniquely defined by its associated Configuration (identified by `config_id`) which
// *should* be immutable: changing an FSM's Configuration post-creation can cause undefined results,
// but, equally, modifying a Configuration which is being used by FSMs, will cause unpredictable
// results.
//
// The FSM carries a `history` of all past Events which have led the FSM to its current `state`, so
// that it can be replicated (and queries about it can be satisfied).
type FiniteStateMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A config_id is the unique identifier for the `Configuration` which defines the possible `states`
	// for an FSM, as well as the allowed `Transitions`; this *may* be composed by a combination of the
	// name and version, but this is not required.
	//
	// So long as `config_id` uniquely identifies a valid (immutable) Configuration, this is sufficient.
	ConfigId string `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// The current state for this FSM, *should* be set as the `starting_state` of the Configuration at creation.
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// An ordered sequence of Events, recording all FSM transitions.
	History []*Event `protobuf:"bytes,3,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *FiniteStateMachine) Reset() {
	*x = FiniteStateMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiniteStateMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiniteStateMachine) ProtoMessage() {}

func (x *FiniteStateMachine) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiniteStateMachine.ProtoReflect.Descriptor instead.
func (*FiniteStateMachine) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{3}
}

func (x *FiniteStateMachine) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *FiniteStateMachine) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FiniteStateMachine) GetHistory() []*Event {
	if x != nil {
		return x.History
	}
	return nil
}

// An `Event` for an FSM.
//
// The target statemachine is uniquely identified by the `id` and namespaced by the `config`.
//
// This can be also used to request the outcome of the Event,
// (an `EventOutcome`) by leaving `event` empty and using the `id` as the `event_id`
// returned in the `EventResponse`.
type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event  *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Config string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{4}
}

func (x *EventRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EventRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *EventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Used to communicate back the `event_id` for the processed Event; it will be the
// Event's `event_id` passed in the `EventRequest` (if one was provided) or a newly
// generated one (typically, a UUID) if none was provided.
//
// The `event_id` can be used to correlate the outcome of the event processing (which
// is asynchronous).
type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string        `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Outcome *EventOutcome `protobuf:"bytes,2,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{5}
}

func (x *EventResponse) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventResponse) GetOutcome() *EventOutcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

// An `EventOutcome` describes what happened when the Event was processed by the
// FSM and will be returned by the server (and also posted to the notifications queue,
// if configured).
type EventOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status code for the outcome of the Event processing; it will be `Ok` if the Event
	// has been successfully processed (in which case the `details` field will be empty).
	Code EventOutcome_StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=statemachine.v1beta.EventOutcome_StatusCode" json:"code,omitempty"`
	// The ID of the FSM for which the event was processed, namespaced by its configuration.
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Config string `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// If anything other than `Ok` is returned, this field will contain a human-readable description
	// of the error, if available.
	Details string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *EventOutcome) Reset() {
	*x = EventOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventOutcome) ProtoMessage() {}

func (x *EventOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventOutcome.ProtoReflect.Descriptor instead.
func (*EventOutcome) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{6}
}

func (x *EventOutcome) GetCode() EventOutcome_StatusCode {
	if x != nil {
		return x.Code
	}
	return EventOutcome_Ok
}

func (x *EventOutcome) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventOutcome) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *EventOutcome) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// Used to retrieve either an individual FSM (by its `id`) or
// the set of FSMs, in a given `state`.
//
// Either way, FSMs are namespaced by their Configuration `name`,
// but without specifying the `version`.
type GetFsmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The "type" of FSM, identified by the configuration name
	Config string `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// One or the other MUST be specified when looking up FSMs,
	// but both cannot be specified at the same time.
	//
	// Types that are assignable to Query:
	//	*GetFsmRequest_Id
	//	*GetFsmRequest_State
	Query isGetFsmRequest_Query `protobuf_oneof:"query"`
}

func (x *GetFsmRequest) Reset() {
	*x = GetFsmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFsmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFsmRequest) ProtoMessage() {}

func (x *GetFsmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFsmRequest.ProtoReflect.Descriptor instead.
func (*GetFsmRequest) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{7}
}

func (x *GetFsmRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (m *GetFsmRequest) GetQuery() isGetFsmRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *GetFsmRequest) GetId() string {
	if x, ok := x.GetQuery().(*GetFsmRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GetFsmRequest) GetState() string {
	if x, ok := x.GetQuery().(*GetFsmRequest_State); ok {
		return x.State
	}
	return ""
}

type isGetFsmRequest_Query interface {
	isGetFsmRequest_Query()
}

type GetFsmRequest_Id struct {
	// Used if retrieving a single statemachine: the `id` to lookup
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

type GetFsmRequest_State struct {
	// If retrieving a number of statemachines: their collective state
	State string `protobuf:"bytes,3,opt,name=state,proto3,oneof"`
}

func (*GetFsmRequest_Id) isGetFsmRequest_Query() {}

func (*GetFsmRequest_State) isGetFsmRequest_Query() {}

// Request to create (or update) a `Statemachine`.
type PutFsmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID for the FSM if specified by the client: leave blank to let the server generate random UUID.
	// Either way, if successful, the `id` will be returned in the `PutResponse`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The new FSM, usually only the `config_id` is required, the rest is derived from
	// the Configuration.
	Fsm *FiniteStateMachine `protobuf:"bytes,2,opt,name=fsm,proto3" json:"fsm,omitempty"`
}

func (x *PutFsmRequest) Reset() {
	*x = PutFsmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutFsmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutFsmRequest) ProtoMessage() {}

func (x *PutFsmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutFsmRequest.ProtoReflect.Descriptor instead.
func (*PutFsmRequest) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{8}
}

func (x *PutFsmRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutFsmRequest) GetFsm() *FiniteStateMachine {
	if x != nil {
		return x.Fsm
	}
	return nil
}

// Response from the server to confirm creation was successful, returning the ID (possibly,
// a newly generated random UUID) and the entity being stored.
type PutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the newly created entity.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The full contents of the newly created entity, can only be on of either an FSM or
	// a Configuration, make sure to check if unsure.
	//
	// Types that are assignable to EntityResponse:
	//	*PutResponse_Config
	//	*PutResponse_Fsm
	EntityResponse isPutResponse_EntityResponse `protobuf_oneof:"entity_response"`
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{9}
}

func (x *PutResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *PutResponse) GetEntityResponse() isPutResponse_EntityResponse {
	if m != nil {
		return m.EntityResponse
	}
	return nil
}

func (x *PutResponse) GetConfig() *Configuration {
	if x, ok := x.GetEntityResponse().(*PutResponse_Config); ok {
		return x.Config
	}
	return nil
}

func (x *PutResponse) GetFsm() *FiniteStateMachine {
	if x, ok := x.GetEntityResponse().(*PutResponse_Fsm); ok {
		return x.Fsm
	}
	return nil
}

type isPutResponse_EntityResponse interface {
	isPutResponse_EntityResponse()
}

type PutResponse_Config struct {
	Config *Configuration `protobuf:"bytes,2,opt,name=config,proto3,oneof"`
}

type PutResponse_Fsm struct {
	Fsm *FiniteStateMachine `protobuf:"bytes,3,opt,name=fsm,proto3,oneof"`
}

func (*PutResponse_Config) isPutResponse_EntityResponse() {}

func (*PutResponse_Fsm) isPutResponse_EntityResponse() {}

// Convenience response type, to return a list of IDs
type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{10}
}

func (x *ListResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Healthcheck response, returns the state of the server
// and whether it is ready to accept incoming requests.
type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      HealthResponse_ReadyState `protobuf:"varint,1,opt,name=state,proto3,enum=statemachine.v1beta.HealthResponse_ReadyState" json:"state,omitempty"`
	Release    string                    `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	TlsEnabled bool                      `protobuf:"varint,3,opt,name=tlsEnabled,proto3" json:"tlsEnabled,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_statemachine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_statemachine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_api_statemachine_proto_rawDescGZIP(), []int{11}
}

func (x *HealthResponse) GetState() HealthResponse_ReadyState {
	if x != nil {
		return x.State
	}
	return HealthResponse_READY
}

func (x *HealthResponse) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *HealthResponse) GetTlsEnabled() bool {
	if x != nil {
		return x.TlsEnabled
	}
	return false
}

var File_api_statemachine_proto protoreflect.FileDescriptor

var file_api_statemachine_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x0a, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xbf, 0x01,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x7d, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x68,
	0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x22, 0xc1, 0x02, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x73, 0x6d, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0x07, 0x22, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x73, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x5a, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x46, 0x73, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x66, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x03, 0x66, 0x73, 0x6d, 0x22, 0xab, 0x01,
	0x0a, 0x0b, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x03, 0x66,
	0x73, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x46,
	0x69, 0x6e, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x48, 0x00, 0x52, 0x03, 0x66, 0x73, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xb8, 0x01,
	0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x26, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x32, 0xeb, 0x07, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x20, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x17, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x22, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5d, 0x0a, 0x15, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50,
	0x75, 0x74, 0x46, 0x73, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x73, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x73, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x10,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x73, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x21, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x7a, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_statemachine_proto_rawDescOnce sync.Once
	file_api_statemachine_proto_rawDescData = file_api_statemachine_proto_rawDesc
)

func file_api_statemachine_proto_rawDescGZIP() []byte {
	file_api_statemachine_proto_rawDescOnce.Do(func() {
		file_api_statemachine_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_statemachine_proto_rawDescData)
	})
	return file_api_statemachine_proto_rawDescData
}

var file_api_statemachine_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_statemachine_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_statemachine_proto_goTypes = []interface{}{
	(EventOutcome_StatusCode)(0),   // 0: statemachine.v1beta.EventOutcome.StatusCode
	(HealthResponse_ReadyState)(0), // 1: statemachine.v1beta.HealthResponse.ReadyState
	(*Transition)(nil),             // 2: statemachine.v1beta.Transition
	(*Event)(nil),                  // 3: statemachine.v1beta.Event
	(*Configuration)(nil),          // 4: statemachine.v1beta.Configuration
	(*FiniteStateMachine)(nil),     // 5: statemachine.v1beta.FiniteStateMachine
	(*EventRequest)(nil),           // 6: statemachine.v1beta.EventRequest
	(*EventResponse)(nil),          // 7: statemachine.v1beta.EventResponse
	(*EventOutcome)(nil),           // 8: statemachine.v1beta.EventOutcome
	(*GetFsmRequest)(nil),          // 9: statemachine.v1beta.GetFsmRequest
	(*PutFsmRequest)(nil),          // 10: statemachine.v1beta.PutFsmRequest
	(*PutResponse)(nil),            // 11: statemachine.v1beta.PutResponse
	(*ListResponse)(nil),           // 12: statemachine.v1beta.ListResponse
	(*HealthResponse)(nil),         // 13: statemachine.v1beta.HealthResponse
	(*timestamppb.Timestamp)(nil),  // 14: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),          // 15: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil), // 16: google.protobuf.StringValue
}
var file_api_statemachine_proto_depIdxs = []int32{
	14, // 0: statemachine.v1beta.Event.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 1: statemachine.v1beta.Event.transition:type_name -> statemachine.v1beta.Transition
	2,  // 2: statemachine.v1beta.Configuration.transitions:type_name -> statemachine.v1beta.Transition
	3,  // 3: statemachine.v1beta.FiniteStateMachine.history:type_name -> statemachine.v1beta.Event
	3,  // 4: statemachine.v1beta.EventRequest.event:type_name -> statemachine.v1beta.Event
	8,  // 5: statemachine.v1beta.EventResponse.outcome:type_name -> statemachine.v1beta.EventOutcome
	0,  // 6: statemachine.v1beta.EventOutcome.code:type_name -> statemachine.v1beta.EventOutcome.StatusCode
	5,  // 7: statemachine.v1beta.PutFsmRequest.fsm:type_name -> statemachine.v1beta.FiniteStateMachine
	4,  // 8: statemachine.v1beta.PutResponse.config:type_name -> statemachine.v1beta.Configuration
	5,  // 9: statemachine.v1beta.PutResponse.fsm:type_name -> statemachine.v1beta.FiniteStateMachine
	1,  // 10: statemachine.v1beta.HealthResponse.state:type_name -> statemachine.v1beta.HealthResponse.ReadyState
	15, // 11: statemachine.v1beta.StatemachineService.Health:input_type -> google.protobuf.Empty
	4,  // 12: statemachine.v1beta.StatemachineService.PutConfiguration:input_type -> statemachine.v1beta.Configuration
	16, // 13: statemachine.v1beta.StatemachineService.GetAllConfigurations:input_type -> google.protobuf.StringValue
	16, // 14: statemachine.v1beta.StatemachineService.StreamAllConfigurations:input_type -> google.protobuf.StringValue
	16, // 15: statemachine.v1beta.StatemachineService.GetConfiguration:input_type -> google.protobuf.StringValue
	10, // 16: statemachine.v1beta.StatemachineService.PutFiniteStateMachine:input_type -> statemachine.v1beta.PutFsmRequest
	9,  // 17: statemachine.v1beta.StatemachineService.GetFiniteStateMachine:input_type -> statemachine.v1beta.GetFsmRequest
	9,  // 18: statemachine.v1beta.StatemachineService.GetAllInState:input_type -> statemachine.v1beta.GetFsmRequest
	9,  // 19: statemachine.v1beta.StatemachineService.StreamAllInstate:input_type -> statemachine.v1beta.GetFsmRequest
	6,  // 20: statemachine.v1beta.StatemachineService.SendEvent:input_type -> statemachine.v1beta.EventRequest
	6,  // 21: statemachine.v1beta.StatemachineService.GetEventOutcome:input_type -> statemachine.v1beta.EventRequest
	13, // 22: statemachine.v1beta.StatemachineService.Health:output_type -> statemachine.v1beta.HealthResponse
	11, // 23: statemachine.v1beta.StatemachineService.PutConfiguration:output_type -> statemachine.v1beta.PutResponse
	12, // 24: statemachine.v1beta.StatemachineService.GetAllConfigurations:output_type -> statemachine.v1beta.ListResponse
	4,  // 25: statemachine.v1beta.StatemachineService.StreamAllConfigurations:output_type -> statemachine.v1beta.Configuration
	4,  // 26: statemachine.v1beta.StatemachineService.GetConfiguration:output_type -> statemachine.v1beta.Configuration
	11, // 27: statemachine.v1beta.StatemachineService.PutFiniteStateMachine:output_type -> statemachine.v1beta.PutResponse
	5,  // 28: statemachine.v1beta.StatemachineService.GetFiniteStateMachine:output_type -> statemachine.v1beta.FiniteStateMachine
	12, // 29: statemachine.v1beta.StatemachineService.GetAllInState:output_type -> statemachine.v1beta.ListResponse
	11, // 30: statemachine.v1beta.StatemachineService.StreamAllInstate:output_type -> statemachine.v1beta.PutResponse
	7,  // 31: statemachine.v1beta.StatemachineService.SendEvent:output_type -> statemachine.v1beta.EventResponse
	7,  // 32: statemachine.v1beta.StatemachineService.GetEventOutcome:output_type -> statemachine.v1beta.EventResponse
	22, // [22:33] is the sub-list for method output_type
	11, // [11:22] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_statemachine_proto_init() }
func file_api_statemachine_proto_init() {
	if File_api_statemachine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_statemachine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiniteStateMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFsmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutFsmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_statemachine_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_statemachine_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetFsmRequest_Id)(nil),
		(*GetFsmRequest_State)(nil),
	}
	file_api_statemachine_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PutResponse_Config)(nil),
		(*PutResponse_Fsm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_statemachine_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_statemachine_proto_goTypes,
		DependencyIndexes: file_api_statemachine_proto_depIdxs,
		EnumInfos:         file_api_statemachine_proto_enumTypes,
		MessageInfos:      file_api_statemachine_proto_msgTypes,
	}.Build()
	File_api_statemachine_proto = out.File
	file_api_statemachine_proto_rawDesc = nil
	file_api_statemachine_proto_goTypes = nil
	file_api_statemachine_proto_depIdxs = nil
}
